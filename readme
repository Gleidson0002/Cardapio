
# Pizzaria do Mago - Página Principal/////////////////////////////////////////////////////////////////////////////////////////////////////

Esta é a página principal da **Pizzaria do Mago**, um site interativo para pedidos online, reservas e visualização de produtos. A página permite que os usuários façam pedidos de pizza, solicitem combos e bebidas, além de fornecer uma interface para finalizar pedidos e realizar reservas.

## Funcionalidades

- **Menu Interativo**: Explore o menu de pizzas, combos e bebidas com imagens e links para cada categoria.
- **Carrinho de Compras**: Adicione itens ao carrinho e visualize os detalhes do pedido em tempo real.
- **Modal de Pedido**: O modal permite que os usuários finalizem seus pedidos com informações como e-mail, senha, nome, telefone e endereço.
- **Modal Cozinha**: Envie solicitações para a cozinha, fornecendo o número da mesa.
- **Reservas**: Acesse a seção de reservas para agendar seu horário na pizzaria.
- **Login**: Realize login para finalizar pedidos e acessar funcionalidades personalizadas.

## Tecnologias Utilizadas

- **HTML5**: Estrutura básica da página.
- **CSS**: Estilização visual do site, incluindo layout responsivo.
- **JavaScript**: Funcionalidades dinâmicas como modais de carrinho, login e solicitações à cozinha.
- **Bootstrap 5**: Framework CSS para tornar o site responsivo e moderno.
- **Font Awesome**: Ícones para representar funcionalidades como carrinho de compras e login.
- **Firebase**: Para carregar dinamicamente os produtos (Firebase pode ser configurado posteriormente para funcionar com os dados do projeto).

# Pizzaria do Mago - Funcionalidades do Carrinho e Pedidos////////////////////////////////////////////////////////////////////////////////

Este script JavaScript é responsável pela interação do usuário com o carrinho de compras e as modais de pedidos no site da **Pizzaria do Mago**. Ele permite adicionar e remover itens do carrinho, visualizar o pedido, e enviar dados ao backend para finalização de pedidos ou solicitação à cozinha.

## Funcionalidades

- **Adicionar ao Carrinho**: Permite adicionar produtos ao carrinho e armazenar as informações no `localStorage`.
- **Atualizar Carrinho**: Exibe os itens do carrinho em tempo real, com as quantidades e preços atualizados.
- **Remover do Carrinho**: Permite ao usuário remover produtos do carrinho.
- **Popup de Confirmação**: Exibe um popup informando ao usuário que o item foi adicionado ao carrinho.
- **Modal de Pedido**: Exibe um modal com os itens do carrinho, permitindo ao usuário visualizar o pedido e tomar ações como finalizar ou solicitar à cozinha.
- **Modal de Login**: Solicita informações do usuário para finalizar o pedido.
- **Modal de Cozinha**: Permite ao usuário enviar uma solicitação à cozinha com o número da mesa.
- **Envio de Dados para o Backend**: Envia os dados do pedido para o backend (via `POST`), incluindo informações do carrinho, usuário e mesa (se aplicável).
- **Limpeza do Carrinho**: Após o envio do pedido, o carrinho é limpo.

## Tecnologias Utilizadas

- **JavaScript**: Manipulação de dados do carrinho e modais.
- **localStorage**: Armazenamento persistente do carrinho de compras no navegador.
- **Modal**: Utilização de modais para interação com o usuário.
- **Fetch API**: Envio de dados de pedidos para o backend do servidor.

## Como Funciona

### 1. **Adicionar Produto ao Carrinho**
Quando o usuário clica no botão de adicionar ao carrinho, o produto selecionado é adicionado ao carrinho no `localStorage`. Se o produto já estiver no carrinho, a quantidade é incrementada.

### 2. **Visualizar o Carrinho**
O carrinho é exibido em uma tabela dentro de um modal. A quantidade de itens, o preço e o total a pagar são calculados e exibidos. O usuário pode remover itens do carrinho.

### 3. **Finalizar Pedido**
O usuário pode clicar para abrir o modal de login, preencher as informações e finalizar o pedido. O pedido, junto com as informações de usuário e os itens no carrinho, é enviado para o servidor.

### 4. **Solicitar à Cozinha**
O usuário pode informar o número da mesa e enviar uma solicitação à cozinha, que também é registrada e enviada ao servidor.

## Como Usar

1. **Adicionar Itens ao Carrinho**:
   - Clique nos botões de adicionar ao carrinho nas páginas de produtos.

2. **Visualizar Carrinho**:
   - Clique no ícone de carrinho na navegação para abrir o modal do carrinho.

3. **Finalizar Pedido**:
   - No modal de carrinho, clique em "Finalizar Pedido" para abrir o modal de login, onde o usuário pode inserir seus dados e finalizar o pedido.

4. **Solicitar à Cozinha**:
   - Clique em "Solicitar à Cozinha" para abrir o modal e enviar o número da mesa.

5. **Limpar Carrinho**:
   - O carrinho será limpo automaticamente após o envio do pedido ou após o usuário fechar a página.

## Como Contribuir

Se você deseja contribuir para o desenvolvimento deste sistema, siga os passos abaixo:

////

# Dashboard de Administração - Sistema de Pedidos e Produtos//////////////////////////////////////////////////////////////////////////////

Este arquivo HTML é a interface de **Dashboard de Administração** para o gerenciamento de produtos em um sistema de pedidos. Ele permite ao administrador cadastrar novos produtos, editar produtos existentes e excluir produtos do sistema. Além disso, exibe uma lista de produtos registrados e oferece uma navegação fácil para as principais seções do painel.

## Funcionalidades

### 1. **Menu Lateral**
- O menu lateral oferece links para acessar diferentes seções do painel administrativo:
  - **Dashboard**: A página principal do painel.
  - **Pedidos**: Página para visualizar e gerenciar pedidos.
  - **Reservas e Avaliações**: Gerenciar reservas e visualizar avaliações.
  - **Sair**: Encerra a sessão e redireciona para a página inicial.

### 2. **Exibição de Produtos**
- A seção principal exibe os **produtos cadastrados**, com detalhes como nome, preço e tipo.
- Os produtos são exibidos em um formato de cartões, utilizando a classe `card-container` para organizar visualmente os itens.

### 3. **Cadastro de Produtos**
- O administrador pode **cadastrar novos produtos** utilizando um formulário que requer as seguintes informações:
  - Nome do Produto
  - Preço
  - Descrição
  - URL da Imagem
  - Tipo do Produto (Comida, Bebida, Combo)

### 4. **Edição de Produtos**
- O administrador pode **editar um produto existente** fornecendo o ID do produto e as informações a serem alteradas (nome, preço, descrição).

### 5. **Exclusão de Produtos**
- O administrador pode **excluir um produto** do sistema fornecendo o ID do produto a ser excluído.

## Estrutura do Arquivo

### 1. **Menu de Navegação**
A estrutura de navegação lateral permite a fácil navegação entre as diferentes seções do painel. O menu é fixo na tela e permanece visível enquanto o usuário interage com as diferentes áreas do painel.

### 2. **Seção de Exibição de Produtos**
Os produtos são exibidos em um contêiner flexível. Para cada produto, um cartão é gerado, exibindo informações relevantes como o nome, o preço e o tipo do produto.

### 3. **Formulários de Cadastro, Edição e Exclusão**
Existem três formulários principais:
- **Cadastro de Produto**: Permite ao administrador adicionar um novo produto ao sistema.
- **Edição de Produto**: Permite ao administrador atualizar as informações de um produto existente.
- **Exclusão de Produto**: Permite ao administrador remover um produto do sistema.

### 4. **Uso de Bibliotecas**
- **Bootstrap 4.5**: Utilizado para estilização e responsividade do layout.
- **Chart.js**: Embora incluído no arquivo, não está sendo utilizado diretamente neste arquivo. É possível que seja utilizado em outro arquivo para gerar gráficos e relatórios no painel.

## Como Usar

1. **Acessar o Dashboard**:
   - O administrador pode acessar o painel administrativo pela URL fornecida, onde o painel será exibido com o menu lateral e a seção principal.

2. **Cadastrar um Produto**:
   - Preencha o formulário de cadastro com as informações do produto (nome, preço, descrição, URL da imagem e tipo de produto) e clique em "Cadastrar Produto".

3. **Editar um Produto**:
   - Para editar um produto, forneça o **ID do Produto** que deseja modificar e atualize os campos de nome, preço e descrição, em seguida, clique em "Atualizar Produto".

4. **Excluir um Produto**:
   - Para excluir um produto, forneça o **ID do Produto** que deseja excluir e clique em "Excluir Produto".

## Tecnologias Utilizadas

- **HTML**: Estrutura da página e dos formulários.
- **CSS (Bootstrap)**: Estilização do layout e dos componentes.
- **JavaScript**: Interatividade e manipulação de dados.
- **Chart.js**: Bibliotecas incluídas para gráficos (potencial uso futuro)

# Lógica de Administração de Produtos - Sistema de Pedidos e Produtos/////////////////////////////////////////////////////////////////////

Este arquivo JavaScript contém a lógica necessária para manipular as operações de **cadastro**, **edição**, **exclusão** e **exibição** de produtos no painel administrativo. Ele interage com a API backend para realizar essas operações de forma assíncrona.

## Funcionalidades

### 1. **Cadastro de Produtos**
O código envia os dados do formulário de cadastro para o servidor utilizando uma **requisição POST** para adicionar um novo produto. Os seguintes dados são enviados:
- Nome do Produto
- Preço
- Descrição
- URL da Imagem
- Tipo do Produto

A requisição é feita para o endpoint `/adicionar-produto`, e o sistema exibe um alerta indicando o sucesso ou falha da operação.

### 2. **Edição de Produtos**
A operação de **edição de produtos** permite ao administrador atualizar os dados de um produto existente fornecendo seu **ID** e os novos dados (nome, preço e descrição). A requisição é feita utilizando o método **PUT** no endpoint `/editar-produto/{id}`, onde `{id}` é o identificador único do produto.

### 3. **Exclusão de Produtos**
O código também permite que o administrador **exclua um produto** utilizando seu **ID**. A operação é feita através de uma requisição **DELETE** para o endpoint `/excluir-produto/{id}`.

### 4. **Exibição de Produtos**
O sistema busca os produtos cadastrados através de uma requisição **GET** para o endpoint `/get-produtos`. Os produtos são carregados dinamicamente na página e exibidos em cartões com as seguintes informações:
- Nome
- Descrição
- Preço
- Tipo
- Imagem
- ID (caso disponível)

Se houver algum erro ao carregar os produtos, uma mensagem será exibida ao usuário.

////

# Dashboard de Pedidos - Sistema de Administração/////////////////////////////////////////////////////////////////////////////////////////

Este arquivo HTML representa a interface de administração de pedidos de um sistema de gerenciamento de pedidos. A página exibe uma lista de pedidos em uma tabela, permitindo que os administradores acompanhem os detalhes dos pedidos feitos pelos clientes.

## Funcionalidades

A página apresenta uma **tabela de pedidos** com os seguintes dados:

- **ID do Pedido**: Identificador único do pedido.
- **Nome do Cliente**: Nome do cliente que fez o pedido.
- **Mesa**: Número da mesa associada ao pedido.
- **Status**: O status atual do pedido (ex: em andamento, concluído).
- **Data/Hora**: A data e a hora em que o pedido foi feito.
- **Ação**: Uma coluna onde o administrador pode realizar ações, como alterar o status do pedido.

A tabela é carregada dinamicamente com dados de pedidos, que são obtidos de um banco de dados através de chamadas feitas por JavaScript.

## Estrutura da Página

### 1. **Cabeçalho**
- A página inclui um **título** que descreve a funcionalidade: "Dashboard - Pedidos".
- O **link para a folha de estilo** externa (`dashboard_style.css`) define o estilo da página.
- **Bootstrap 4** é usado para garantir que a interface tenha um design responsivo e visualmente agradável.

### 2. **Sidebar (Barra Lateral)**
A página possui uma barra lateral com o menu de navegação, que inclui:
- **Dashboard**: Página inicial do painel.
- **Pedidos**: A página atual que exibe a lista de pedidos.
- **Reservas e Avaliações**: Seção para gerenciar reservas e avaliações dos clientes.
- **Sair**: Link para sair da interface administrativa.

A barra lateral utiliza uma classe de navegação do **Bootstrap** para um layout limpo e funcional.

### 3. **Tabela de Pedidos**
A tabela exibe os dados dos pedidos. As colunas são as seguintes:
- **ID do Pedido**: Número único do pedido.
- **Nome do Cliente**: Nome do cliente associado ao pedido.
- **Mesa**: Número da mesa onde o pedido foi realizado.
- **Status**: Indica o status atual do pedido (em andamento, concluído, etc.).
- **Data/Hora**: Mostra a data e hora em que o pedido foi realizado.
- **Ação**: Coluna onde o administrador pode realizar ações adicionais (ex: alterar o status do pedido).

Os dados da tabela são inseridos dinamicamente no corpo da tabela (`<tbody>`) através de um arquivo JavaScript.

## Como Usar

1. **Navegação no Menu**:
   - O menu na barra lateral permite que o administrador navegue para outras páginas do sistema, como o painel de dashboard e a seção de reservas.
   
2. **Visualização de Pedidos**:
   - A tabela de pedidos será automaticamente preenchida com os dados de pedidos provenientes do servidor. Cada linha exibirá informações relevantes sobre o pedido, como o nome do cliente, número da mesa e o status do pedido.

## Tecnologias Utilizadas

- **HTML**: Estrutura da página e conteúdo estático.
- **CSS**: Estilos visuais, incluindo responsividade e formatação.
- **JavaScript**: Lógica de preenchimento da tabela com os dados de pedidos. O arquivo `pedidos.js` é responsável por fazer requisições ao servidor e exibir os dados.
- **Bootstrap 4**: Framework CSS para criar um design responsivo e elegante.

## Funcionalidade Adicional

### 1. **Interação com o Backend**
O backend (não mostrado neste arquivo) se comunica com a tabela de pedidos, preenchendo-a com os dados necessários. A tabela é atualizada dinamicamente com os pedidos existentes, permitindo que o administrador veja as informações de maneira clara.

### 2. **Estilo Responsivo**
Graças ao uso do Bootstrap, a página é totalmente responsiva, adaptando-se a diferentes tamanhos de tela. Isso garante que o painel de administração de pedidos seja utilizável em dispositivos móveis, tablets e desktops.


# Gerenciamento de Pedidos - Funcionalidades e Lógica/////////////////////////////////////////////////////////////////////////////////////

Este arquivo JavaScript é responsável por carregar e atualizar os pedidos no painel de administração de pedidos. Ele faz requisições ao backend para recuperar os pedidos e permitir que o administrador marque os pedidos como concluídos.

## Funcionalidades

### 1. **Carregar Pedidos**
A função `carregarPedidos` busca os pedidos do backend ou do Firebase e preenche a tabela de pedidos na interface. Ela faz uma requisição `GET` para o endpoint `/get-pedidos` do servidor e exibe as seguintes informações na tabela:

- **ID do Pedido**: Identificador único do pedido.
- **Nome do Cliente**: Nome do usuário que fez o pedido.
- **Mesa**: Número da mesa associada ao pedido.
- **Status**: O status atual do pedido (ex: em andamento, concluído).
- **Data/Hora**: A data e hora em que o pedido foi feito.
- **Ação**: Um botão para marcar o pedido como "Concluído".

### 2. **Marcar Pedido Como Concluído**
A função `marcarComoConcluido` permite que o administrador marque um pedido como concluído. Quando o administrador clica no botão "Concluir", uma requisição `PUT` é feita para o backend, atualizando o status do pedido.

- O botão de conclusão chama essa função passando o ID do pedido como parâmetro.
- Caso a atualização seja bem-sucedida, a lista de pedidos é recarregada automaticamente para refletir a alteração.

### 3. **Tratamento de Erros**
Ambas as funções possuem tratamento de erros, que captura falhas nas requisições de rede e exibe mensagens adequadas para o administrador, além de registrar erros no console para depuração.

## Fluxo de Dados

- Quando a página é carregada, a função `carregarPedidos` é chamada automaticamente para carregar a lista de pedidos.
- Cada pedido exibido na tabela contém um botão de ação que chama a função `marcarComoConcluido` para atualizar o status do pedido.
- O backend ou Firebase deve fornecer os dados dos pedidos no formato correto (um array de objetos), com cada objeto representando um pedido.

## Requisições ao Backend

As funções fazem requisições HTTP para o backend local (porta `5000`):

- **GET /get-pedidos**: Recupera todos os pedidos.
- **PUT /marcar-concluido/{pedidoId}**: Marca um pedido como concluído, identificando-o pelo ID.

## Como Usar

1. **Carregar Pedidos**:
   - Quando a página for carregada, a função `carregarPedidos` fará uma requisição ao servidor e preenche a tabela com os dados dos pedidos.

2. **Marcar Pedido como Concluído**:
   - O administrador pode clicar no botão **"Concluir"** ao lado de um pedido para marcar esse pedido como concluído. O status será atualizado e a lista será recarregada automaticamente.

## Exemplo de Uso

Supondo que o backend esteja configurado corretamente, a página exibirá uma tabela com pedidos como o exemplo abaixo:

| ID do Pedido | Nome do Cliente | Mesa | Status    | Data/Hora          | Ação          |
|--------------|-----------------|------|-----------|--------------------|---------------|
| 1            | João da Silva   | 12   | Em andamento | 30/11/2024 14:30   | [Concluir]    |
| 2            | Maria Oliveira  | 3    | Em andamento | 30/11/2024 15:00   | [Concluir]    |

Ao clicar no botão **Concluir**, o pedido será marcado como concluído e a tabela será atualizada.

## Tecnologias Utilizadas

- **JavaScript**: Lógica de carregamento e atualização dos pedidos.
- **Fetch API**: Para fazer requisições HTTP ao backend.
- **Backend**: O backend (não incluído neste código) deve fornecer os endpoints necessários para carregar e atualizar os pedidos.

# Dashboard - Gerenciamento de Reservas///////////////////////////////////////////////////////////////////////////////////////////////////

Este arquivo HTML exibe o painel de gerenciamento de reservas de um sistema de restaurante ou estabelecimento. Ele permite que os administradores visualizem e interajam com as reservas feitas pelos clientes.

## Estrutura e Funcionalidades

### 1. **Menu Lateral (Sidebar)**
A página possui um menu lateral (sidebar) fixo à esquerda com as seguintes opções de navegação:
- **Dashboard**: Acesso à página principal do painel de controle.
- **Pedidos**: Acesso à página de gerenciamento de pedidos.
- **Reservas e Avaliações**: Acesso à página de gerenciamento de reservas.
- **Sair**: Logout do sistema.

### 2. **Área de Reservas**
A principal funcionalidade da página é exibir a lista de reservas feitas pelos clientes. As reservas são mostradas em cartões (cards) que podem ser estilizados conforme a necessidade.

### 3. **Cards de Reservas**
Cada reserva será apresentada dentro de um **card**. O estilo do card é configurado no código com uma sombra suave e bordas arredondadas. Quando o usuário passar o mouse sobre um card, ele será levemente ampliado, proporcionando um efeito de interação. A estrutura de cada card inclui:
- **Título**: Nome ou título da reserva.
- **Texto**: Descrição ou detalhes adicionais sobre a reserva.

### 4. **Layout Responsivo**
A página foi criada para ser responsiva, com a utilização do framework **Bootstrap 4** para garantir que a interface se ajuste adequadamente em diferentes dispositivos. Além disso, a exibição dos cards é adaptável, com a utilização de uma `container` e `row` do Bootstrap para organizar as reservas de forma flexível.

### 5. **Integração com o Backend**
Os dados das reservas (por exemplo, lista de reservas) são carregados dinamicamente através de um script JavaScript (`gerir_reservas.js`). Este script faz uma requisição ao backend para buscar as reservas armazenadas, exibindo-as de forma organizada na interface.

## Estilos Customizados

O código inclui um estilo customizado para os cards:
- **Sombra suave**: Para dar um efeito visual agradável.
- **Efeito de hover**: Quando o usuário passa o mouse sobre o card, ele aumenta de tamanho (`scale(1.03)`), criando uma sensação de interatividade.

### Exemplo de Card de Reserva
Cada card exibe as informações de uma reserva, e pode ser similar ao exemplo abaixo:

| Reserva | Cliente | Data/Hora | Mesa | Status |
|---------|---------|-----------|------|--------|
| **Card 1** | João Silva | 30/11/2024 14:00 | 12 | Confirmada |
| **Card 2** | Maria Oliveira | 30/11/2024 15:00 | 3  | Pendente |

## Como Usar

1. **Menu Lateral**: O menu lateral permite navegar entre as diferentes seções do painel (Dashboard, Pedidos, Reservas).
2. **Cards de Reservas**: Quando o backend fornecer dados das reservas, esses serão apresentados em cards dentro da seção "Reservas".

### Requisições ao Backend
Os dados das reservas são carregados a partir do backend, usando o script `gerir_reservas.js`. A comunicação com o backend deve ser realizada através de uma requisição HTTP, que irá retornar as informações das reservas a serem exibidas na página.

## Tecnologias Utilizadas

- **HTML5**: Estrutura principal da página.
- **CSS**: Estilo customizado dos cards de reservas.
- **Bootstrap 4**: Framework CSS para estrutura e responsividade da página.
- **JavaScript**: Para carregar as reservas dinamicamente a partir do backend.
- **Chart.js**: Biblioteca JavaScript inclusa no cabeçalho (não utilizada neste arquivo, mas pode ser usada para gráficos em páginas relacionadas).

# Página de Login////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Esta página permite que usuários se autentiquem em um sistema usando o Firebase Authentication. A página conta com um formulário simples de login, onde o usuário pode inserir seu endereço de e-mail e senha para acessar a plataforma.

## Funcionalidades

### 1. **Autenticação com Firebase**
A página usa o Firebase Authentication para validar o login do usuário. Quando o usuário envia as credenciais (e-mail e senha), o Firebase autentica as informações com o banco de dados, permitindo o acesso ao sistema.

### 2. **Formulário de Login**
O formulário de login contém os seguintes campos:
- **Email**: O campo onde o usuário insere seu endereço de e-mail.
- **Senha**: O campo onde o usuário insere sua senha de acesso.

### 3. **Validação de Dados**
Quando o usuário submete o formulário, a página valida se os campos foram preenchidos corretamente. Em caso de erro (e-mail ou senha incorretos), uma notificação será exibida usando a biblioteca SweetAlert2.

### 4. **Bootstrap para Estilização**
O layout é estilizado usando o **Bootstrap 5**, garantindo que a página seja responsiva e tenha um design moderno e simples.

### 5. **SweetAlert2**
Para exibir alertas e mensagens de erro, a biblioteca **SweetAlert2** é utilizada. Em caso de erro de autenticação ou campos inválidos, uma mensagem será exibida de forma amigável para o usuário.

## Tecnologias Utilizadas

- **Firebase Authentication**: Para autenticação de usuários com e-mail e senha.
- **Bootstrap 5**: Framework CSS utilizado para garantir um design responsivo e estilização moderna.
- **SweetAlert2**: Biblioteca para exibir mensagens de alerta e erro de forma interativa.
- **JavaScript**: Para manipulação dos dados do formulário e integração com o Firebase.

## Como Usar

1. **Preencha o formulário**: O usuário deve inserir seu endereço de e-mail e senha nos campos correspondentes.
2. **Clique no botão "Validar"**: Após preencher os dados, o usuário pode clicar no botão para realizar o login.
3. **Verifique o resultado**: Se os dados forem válidos, o usuário será autenticado e redirecionado para a página principal. Se os dados forem inválidos, um alerta será exibido.

### Código JavaScript para Autenticação (arquivo `login.js`)

O código JavaScript responsável pela autenticação do usuário usa a biblioteca do Firebase para validar as credenciais fornecidas. Se a autenticação for bem-sucedida, o usuário é redirecionado para a página principal. Caso contrário, um alerta informará sobre o erro.








