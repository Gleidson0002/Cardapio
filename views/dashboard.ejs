<!DOCTYPE html>
<html lang="pt-BR">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="/stylesheets/dashboard_style.css">
    <title>Dashboard</title>
</head>

<body>

    <div class="sidebar">
        <h2>Menu</h2>
        <ul class="nav flex-column">
            <li class="nav-item">
                <a class="nav-link active" href="#">Dashboard</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#">Relatórios</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#">Configurações</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="login.html">Sair</a>
            </li>
        </ul>
    </div>

    <div class="card-container" style="display: flex; flex-wrap: wrap; justify-content: center; gap: 30px;margin-top: 50px;width: 80%;color: black;margin-left: 200px;">
      <!-- Os produtos serão exibidos aqui -->
  </div>
    <div class="box">

        <form id="product-form">
            <h1>Cadastro de Produtos</h1>

            <label for="product-image">Imagem do Produto:</label>
            <input type="file" id="product-image" accept="image/*"><br><br>

            <label for="product-name">Nome do Produto:</label>
            <input type="text" id="product-name" required><br><br>

            <label for="product-price">Preço:</label>
            <input type="number" id="product-price" step="0.01" required><br><br>

            <label for="product-description">Descrição:</label>
            <textarea id="product-description" required></textarea><br><br>
            
            <button type="submit">Cadastrar Produto</button>
        </form>

        <form id="delete-product-form">
            <h2>Excluir Produto</h2>
            <label for="delete-product-id">ID do Produto:</label>
            <input type="text" id="delete-product-id" required><br><br>

            <button type="submit">Excluir Produto</button>
        </form>

        <form id="edit-product-form">
            <h2>Editar Produto</h2>
            <label for="edit-product-id">ID do Produto:</label>
            <input type="text" id="edit-product-id" required><br><br>

            <label for="edit-product-name">Nome do Produto:</label>
            <input type="text" id="edit-product-name" required><br><br>

            <label for="edit-product-price">Preço:</label>
            <input type="number" id="edit-product-price" step="0.01" required><br><br>

            <label for="edit-product-description">Descrição:</label>
            <textarea id="edit-product-description" required></textarea><br><br>

            <button type="submit">Atualizar Produto</button>
        </form>

    </div>

    <script>
        document.getElementById('product-form').addEventListener('submit', async function (event) {
    event.preventDefault(); 

    const nome = document.getElementById('product-name').value;
    const preco = parseFloat(document.getElementById('product-price').value);
    const descricao = document.getElementById('product-description').value;
    const imageFile = document.getElementById('product-image').files[0];

    // Criando um FormData para enviar os dados incluindo a imagem
    const formData = new FormData();
    formData.append('nome', nome);
    formData.append('preco', preco);
    formData.append('descricao', descricao);
    formData.append('image', imageFile);

    try {
        const response = await fetch('http://localhost:5000/adicionar-produto', {
            method: 'POST',
            body: formData, // Enviando o FormData com imagem
        });

        if (response.ok) {
            alert('Produto cadastrado com sucesso!');
            document.getElementById('product-form').reset(); 
        } else {
            const errorData = await response.text(); 
            console.error('Erro na resposta do servidor:', errorData);
            alert(`Erro ao cadastrar o produto: ${errorData}`);
        }
    } catch (error) {
        console.error('Erro ao se comunicar com o servidor:', error);
        alert('Erro ao se comunicar com o servidor.');
    }
});


        document.getElementById('edit-product-form').addEventListener('submit', async function (event) {
  event.preventDefault();

  const id = document.getElementById('edit-product-id').value;
  const nome = document.getElementById('edit-product-name').value;
  const preco = parseFloat(document.getElementById('edit-product-price').value);
  const descricao = document.getElementById('edit-product-description').value;

  const produto = { nome, preco, descricao };

  try {
    const response = await fetch(`/editar-produto/${id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(produto),
    });

    if (response.ok) {
      alert('Produto atualizado com sucesso!');
    } else {
      alert('Erro ao atualizar o produto.');
    }
  } catch (error) {
    console.error('Erro:', error);
    alert('Erro ao se comunicar com o servidor.');
  }
});

document.getElementById('delete-product-form').addEventListener('submit', async function (event) {
  event.preventDefault();

  const id = document.getElementById('delete-product-id').value;

  try {
    const response = await fetch(`/excluir-produto/${id}`, {
      method: 'DELETE',
    });

    if (response.ok) {
      alert('Produto excluído com sucesso!');
    } else {
      alert('Erro ao excluir o produto.');
    }
  } catch (error) {
    console.error('Erro:', error);
    alert('Erro ao se comunicar com o servidor.');
  }
});

async function carregarProdutos() {
            try {
                const response = await fetch('http://localhost:5000/get-produtos');
                
                if (!response.ok) {
                    throw new Error(`Erro ao buscar produtos: ${response.statusText}`);
                }

                const produtos = await response.json();

                if (!Array.isArray(produtos)) {
                    throw new Error('Formato de resposta inválido. Esperado um array de produtos.');
                }

                console.log(produtos); // Verifica o conteúdo da resposta

                const cardContainer = document.querySelector('.card-container');
                cardContainer.innerHTML = '';

                produtos.forEach(produto => {
                    console.log(produto); // Verifica cada produto
                    const card = document.createElement('div');
                    card.style = 'border: 1px solid #ccc; padding: 15px; background-color: #fff; text-align: center; width: 250px; box-sizing: border-box;';

                    // Verifica se a chave 'id' está presente
                    

                    card.innerHTML = `
                        <h3>${produto.nome}</h3>
                        <p>${produto.descricao}</p>
                        <p><strong>R$ ${produto.preco ? produto.preco.toFixed(2) : '0.00'}</strong></p>
                    `;
                    cardContainer.appendChild(card);
                });
            } catch (error) {
                console.error('Erro ao carregar os produtos:', error);
                alert('Erro ao carregar os produtos. Verifique o console para mais detalhes.');
            }
        }

        carregarProdutos();
    </script>
</body>

</html>